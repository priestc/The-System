#!/usr/bin/env python

import datetime
import sys
import tempfile
import shutil

from tsclient.core import *
from tsclient.options import *

base_tmp = tempfile.mkdtemp()

def do_exit():
    shutil.rmtree(base_tmp)
    raise SystemExit

if __name__ == '__main__':
    
    try:
        fl = FileList(options.path, options.bootleg)
        lists = fl.get_temp_lists(base_tmp)
    except ImproperMP3Error, e:
        # show any show stopper errors, such as finding a file
        # named *.mp3 but its not an mp3
        print bright_red(e)
        do_exit()
    
    if not options.silent and fl.warnings:
        # show things like skipped .m3u files and crap
        print blue("\n".join(fl.warnings))
    
    # write the new tags onto the copies of the mp3s in the temp directory
    overwrite_tags(lists['mp3s'], options.artist,
                    options.album, options.date, options.meta)
    
    try:
        result = validate_mp3s(lists['mp3s'])
    except ImproperMP3Error, e:
        print bright_red("MP3 tags did not validate: %s" % e)
        do_exit()
        
    artist = result['artist']
    album = result['album']
    preset = result['preset']
    date = result['date']
    
    tmp = tempfile.NamedTemporaryFile()
    zf = ZipFile(tmp, lists['mp3s'], lists['others'])
    
    if not options.silent:
        print zf.show_contents()
        size = tmp.tell()
        mb = size / 1048576.0
        print "------\nArchive Size: {0} bytes ({1:.2f} MB)".format(size, mb)
    else:
        # actually make the zip since we're not calling .show_contents()
        zf.get_zip()
    
    ###########
    ###########
    
    if (not options.skip_verify and
        not options.just_archive and
        not options.silent):
        answer = raw_input("Does the above look all right? [y]/n?")
        if answer != '' and answer.upper() != 'Y':
            do_exit()
        
    if options.just_archive or options.leave_archive:
        tmp.seek(0)
        f = open('archive.zip', 'w')
        f.writelines(tmp.readlines())
        tmp.seek(0)
        if options.just_archive:
            do_exit()
    
    #####
        
    vf = VerifyClient(artist=artist, album=album, password=options.password,
                      url=options.url, interface="Command Line")
    
    if not options.silent:
        print "------"
        print "Verifying upload...",
        sys.stdout.flush()
        
    vf.make_request()
    
    if not options.silent:
        print "OK"
                          
    #####
    
    if not options.silent:
        print "    Checking if password is correct...",
        
    if vf.is_password_match() is False:
        print "Hrm"
        print bright_red("Wrong Password")
        do_exit()
    else:
        print "OK"
        
    #####
    
    if not options.silent:
        print "    Checking if client version is acceptable...",
        
    if not vf.is_allowed_client():
        print "Hrm"
        print bright_red("Upload is rejected because your client is too old, please update")
        print bright_red("Your version: v%s, latest version: v%s" % (VERSION, vf.get_latest_client_version()))
        do_exit()
    else:
        print "OK"
    
    if not vf.is_latest_client():
        print "This is not the latest version of this sctipt, the latest vesion is:",
        print bright_green(vf.get_latest_client_version())
                            
    #####
    
    if not options.silent:
        print "    Checking if this album is a dupe...",
    
    if vf.is_dupe() is True:
        print "Uh-oh"
        print bright_red("Album already exists in The System. This is a dupe")
        do_exit()
    else:
        print "OK, not a dupe"
        
    ##### send the file off to the server!
    
    data = dict(artist=artist, album=album, meta=options.meta,
                profile=preset, date=date, password=options.password)
    
    if not options.silent:
        print "------"
        print size, "bytes being sent to server...(ctrl+z to stop)"
    
    before = datetime.datetime.now()
    result = send_request(tmp, data, options.url, interface="Command Line")
    after = datetime.datetime.now()
    
    print result
    
    if not options.silent:
        duration = after - before
        secs = duration.seconds + (duration.microseconds / 100000.0)
        speed = "{0:.2f} KB/sec".format((size / 1024.0) / secs)
        print "Total Time:", duration, speed
        
    

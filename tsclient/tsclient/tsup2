#!/usr/bin/env python

import tempfile
import shutil
from tsclient.app import *
from tsclient.options import *
from tsclient.http import *
base_tmp = tempfile.mkdtemp()

def do_exit():
    shutil.rmtree(base_tmp)
    raise SystemExit

if __name__ == '__main__':
    
    try:
        fl = FileList(options.path, options.bootleg)
        lists = fl.get_lists()
    except ImproperMP3Error, e:
        # show any show stopper errors, such as finding a file
        # named *.mp3 but its not an mp3
        print bright_red(e)
        do_exit()
    
    if not options.silent and fl.warnings:
        # show things like skipped .m3u files and crap
        print "\n".join(fl.warnings)
    
    if options.artist:
        set_tags(lists['mp3s'], 'artist', options.artist)
        
    if options.album:
        set_tags(lists['mp3s'], 'album', options.album)
        
    if options.date:
        set_tags(lists['mp3s'], 'date', options.date)
            
    if options.meta:
        set_tags(lists['mp3s'], 'comment', options.meta, append=True)
    
    # result = dict is it passes validation
    result = validate_mp3s(lists['mp3s'])
    if type(result) is not dict:
        print bright_red("MP3 tags did not validate: %s" % result)
        do_exit()
    else:
        artist = result['artist']
        album = result['album']
        preset = result['preset']
        date = result['date']
        
    copy_to_temp(lists['mp3s'], lists['other'], base_tmp)
    
    tmp = tempfile.NamedTemporaryFile()
    zf = ZipFile(tmp, lists['mp3s'], lists['other'])
    
    if not options.silent:
        zf.show_contents()
        size = tmp.tell()
        mb = size / 1048576.0
        print "------\nArchive Size: {0} bytes ({1:.2f} MB)".format(size, mb)
    
    ###########
    ###########
    
    if (not options.skip_verify and
        not options.just_archive and
        not options.silent):
        answer = raw_input("Does the above look all right? [y]/n?")
        if answer.upper() == 'N': do_exit()
        
    if options.just_archive or options.leave_archive:
        tmp.seek(0)
        f = open('archive.zip', 'w')
        f.writelines(tmp.readlines())
        tmp.seek(0)
        if options.just_archive:
            do_exit()
        
    #####
    
    if not options.silent:
        print "Checking if this album is a dupe...",
        
    result = check_dupe(artist, album, options.url)
    
    if result == 'Yes':
        print bright_red("\nThis album has already been uploaded")
        do_exit()
    elif result == 'No':
        if not options.silent: print "OK, not a dupe"
    else:
        print "Hrm"
        print bright_red("Error occured when checking for dupe. Try again later.")
        do_exit()
        
    ##### send the file off to the server!
    
    data = dict(artist=artist, album=album, meta=options.meta,
                profile=preset, date=date, password=options.password)
    
    send_request(tmp, data, options.url, silent=options.silent)
    
    
    
    
    
    
    
    
    
    

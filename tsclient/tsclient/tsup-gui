#!/usr/bin/env python
import shutil
import time
import datetime
import threading

import wx
from tsclient.core import *
from tsclient.gui_threads import *

# Create a new frame class, derived from the wxPython Frame.
class MainFrame(wx.Frame):

    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(400, 450))
        
        self.url = "http://thesystem.chickenkiller.com"
        self.CreateStatusBar()
        
        self.panel = wx.Panel(self, -1)
        text_size = (200, -1)
        
        inst = wx.StaticText(self.panel, -1, "Leave blank to use value in tags", pos=(10, 15))
        
        label_album = wx.StaticText(self.panel, -1, "Album:", pos=(10, 45))
        self.album_wig = wx.TextCtrl(self.panel, -1, "", pos=(80, 40),
                                     size=text_size)
        
        label_artist = wx.StaticText(self.panel, -1, "Artist:", pos=(10, 75))                             
        self.artist_wig = wx.TextCtrl(self.panel, -1, "", pos=(80, 70),
                                      size=text_size)
        
        label_date = wx.StaticText(self.panel, -1, "Date:", pos=(10, 105))                              
        self.date_wig = wx.TextCtrl(self.panel, -1, "", pos=(80, 100),
                                    size=text_size)
        
        label_meta = wx.StaticText(self.panel, -1, "Meta:", pos=(10, 135))                            
        self.meta_wig = wx.TextCtrl(self.panel, -1, "", pos=(80, 130),
                                    size=text_size)
        
        label_path = wx.StaticText(self.panel, -1, "Path to album:", pos=(10, 165))
        self.path_wig = wx.TextCtrl(self.panel, -1, "", pos=(10, 180),
                                    size=(300, -1))
        
        label_pass = wx.StaticText(self.panel, -1, "Password: (required)", pos=(10, 215))
        self.password_wig = wx.TextCtrl(self.panel, -1, "", pos=(10, 230),
                                    size=(300, -1))
                                    
        self.status_area = wx.TextCtrl(self.panel, -1, pos=(10, 270), size=(380,150),
            style=wx.TE_MULTILINE|wx.BORDER_SUNKEN|wx.TE_READONLY|wx.TE_RICH2)
        
        #### buttons below
        
        self.browse = wx.Button(self.panel, wx.ID_FIND, size=(75, -1),
                                    pos=(315, 179))
        
        self.upload = wx.Button(self.panel, -1, "Upload", size=(75, -1),
                                    pos=(315, 229))
        #self.upload.Disable()                          
        
        self.Bind(wx.EVT_BUTTON, self.on_browse, self.browse)
        self.Bind(wx.EVT_BUTTON, self.verify_path, self.upload)
        self.Bind(wx.EVT_KEY_UP, self.enable_upload, self.path_wig)
        
        self.bootleg = wx.CheckBox(self.panel, -1, "Bootleg", pos=(300, 100))
        
        # set up the handler for dealing with printing upload results to the
        # status section
        EVT_UPLOAD_DONE(self, self.upload_done)
        EVT_STATUS(self, self.message_event)
        
        self.Centre()
        
    def enable_upload(self, event):
        self.upload.Enable()
       
    def on_browse(self, event):
        """
        When the 'find' button is clicked, launch the file browser and copy
        that value into the path box
        """
        
        file_dialog = wx.FileDialog(self.panel, "Choose Directory to Upload")
        if file_dialog.ShowModal() == wx.ID_OK:
            self.path_wig.SetValue(file_dialog.GetDirectory())
        
    def alert(self, parent, message, caption):
        dlg = wx.MessageDialog(parent, message, caption, wx.OK | wx.ICON_EXCLAMATION)
        dlg.ShowModal()
        dlg.Destroy()
    
    def write_to_status(self, message, color="black"):
        start = len(self.status_area.GetValue())
        self.status_area.AppendText(message + "\n")
        fg = getattr(wx, color.upper())
        at = wx.TextAttr(fg)
        end = len(self.status_area.GetValue())
        self.status_area.SetStyle(start, end, at)
       
    def verify_path(self, event):
        """
        Verify the path, and start the upload
        """
        
        base_tmp = tempfile.mkdtemp()
        path = self.path_wig.GetValue()
        password = self.password_wig.GetValue()
        bootleg = self.bootleg.GetValue()
        
        album = self.album_wig.GetValue()
        artist = self.artist_wig.GetValue()
        meta = self.meta_wig.GetValue()
        date = self.date_wig.GetValue()
        
        self.write_to_status("verifying: " + path)
        
        try:
            fl = FileList(path, bootleg)
            lists = fl.get_temp_lists(base_tmp)
        except ImproperMP3Error, e:
            # show any show stopper errors, such as finding a file
            # named *.mp3 but its not an mp3 or a mp3 with no tags
            self.alert(self.panel, message=str(e), caption="Error")
            self.write_to_status("failed:" + path, color="red")
            self.finish(base_tmp)
            return

        if len(lists['mp3s']) == 0:
            self.alert(self.panel, message="No MP3 files found at: " + path, caption="Error")
            self.write_to_status("failed: " + path, color="red")
            self.finish(base_tmp)
            return
            
        if fl.warnings:
            self.write_to_status("\n".join(fl.warnings), color="blue")
            
        overwrite_tags(lists['mp3s'], artist, album, date, meta)
        
        try:
            result = validate_mp3s(lists['mp3s'])
        except ImproperMP3Error, e:
            self.write_to_status("MP3 tags did not validate: %s" % result, "red")
            self.finish(base_tmp)
        
        artist = result['artist']
        album = result['album']
        preset = result['preset']
        date = result['date']
        
        tmp = tempfile.NamedTemporaryFile()
        zf = ZipFile(tmp, lists['mp3s'], lists['others'])
        
        filelist = zf.show_contents()
        self.upload_size = tmp.tell()
        message = "This is what the zip file will look like:\n\n" + filelist
        message += "\n\nTotal size of archive: %.2f MB" % (self.upload_size / 1048576.0)
        message += "\nDoes this look all right?"
        
        verify_box = wx.MessageDialog(self.panel,
                                      message, "Verify Contents",
                                      wx.YES_NO | wx.ICON_QUESTION)

        if verify_box.ShowModal() == wx.ID_OK:
            data = dict(artist=artist, album=album, meta=meta,
                        profile=preset, date=date, password=password)
                        
            aa = (data['artist'], data['album'])
            
            msg = "Starting upload of: %s - %s" % aa
            self.SetStatusText("Currently uploading %s - %s..." %aa )
            self.write_to_status(msg)
            
            # start the upload thread
            UploadThread(self, data, tmp, self.url).start()
            
        else:
            self.write_to_status("Aborted", "red")
        
        self.finish(base_tmp)
    
    def finish(self, base_tmp):
        """
        After the upload is finished or the upload is rejected, remove all the
        temp files created
        """
        
        shutil.rmtree(base_tmp)

    def upload_done(self, event):
        """
        Capture the event that gets launched from the seperate upload thread
        and put the text onto the status window
        """
        
        self.SetStatusText("")
        self.write_to_status(event.msg, event.color)
    
    def message_event(self, event):
        """
        Used for threads to write messages to the status area
        """
        
        self.write_to_status(event.msg, event.color)

# Every wxWidgets application must have a class derived from wx.App
class MyApp(wx.App):

    # wxWindows calls this method to initialize the application
    def OnInit(self):

        # Create an instance of our customized Frame class
        frame = MainFrame(None, -1, "The System Uploader")
        frame.Show(True)

        # Tell wxWindows that this is our main window
        self.SetTopWindow(frame)

        # Return a success flag
        return True



app = MyApp(0)     # Create an instance of the application class
app.MainLoop()     # Tell it to start processing events






